{"version":3,"sources":["components/MailCard.js","components/MobileScreen.js","App.js","serviceWorker.js","index.js"],"names":["LetterCard","styled","div","_templateObject","props","overflowY","EmailAuthor","h3","_templateObject2","EmailAddress","h4","_templateObject3","EmailBody","p","_templateObject4","MailCard","_props$data","data","author","address","body","react_default","a","createElement","scrollable","Container","MobileScreen_templateObject","position","MobileScreen","mail","Data","map","letter","components_MailCard","key","onClick","handler","undefined","react","id","AppDiv","App_templateObject","App","state","isOpen","posX","handleClick","event","clientY","document","getElementById","clientHeight","_this","openLetter","clientX","clientWidth","swipeRight","swipeLeft","scrollWidth","setState","prevState","this","components_MobileScreen","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+wJAGA,IAAMA,EAAaC,IAAOC,IAAVC,IAGE,SAACC,GAAD,OAAYA,EAAMC,YAQ9BC,EAAcL,IAAOM,GAAVC,KAIXC,EAAeR,IAAOS,GAAVC,KAGZC,EAAYX,IAAOY,EAAVC,KAaAC,EAXE,SAAAX,GAAS,IAAAY,EACYZ,EAAMa,KAAhCC,EADcF,EACdE,OAAQC,EADMH,EACNG,QAASC,EADHJ,EACGI,KACzB,OACIC,EAAAC,EAAAC,cAACvB,EAAD,CAAYK,UAAWD,EAAMoB,WAAa,SAAW,UACjDH,EAAAC,EAAAC,cAACjB,EAAD,cAAoBY,GACpBG,EAAAC,EAAAC,cAACd,EAAD,eAAsBU,EAAtB,KACAE,EAAAC,EAAAC,cAACX,EAAD,KAAYQ,iQCxBxB,IAAMK,EAAYxB,IAAOC,IAAVwB,IAKa,SAAAtB,GAAK,OAAIA,EAAMuB,WAuB5BC,EAnBM,SAAAxB,GACjB,IAAMyB,EAAOC,EAAKD,KAAKE,IAAI,SAAAC,GAAM,OAC7BX,EAAAC,EAAAC,cAACU,EAAD,CACIhB,KAAMe,EACNE,IAAKF,EAAOZ,KACZe,QAAS/B,EAAMoB,WAAapB,EAAMgC,aAAUC,EAC5Cb,WAAYpB,EAAMoB,eAG1B,OACIH,EAAAC,EAAAC,cAACe,EAAA,SAAD,KACIjB,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAACE,EAAD,CAAWc,GAAG,YAAYZ,SAAUvB,EAAMuB,UACrCE,wNCvBjB,IAAMW,EAASvC,IAAOC,IAAVuC,KAmEGC,6MAzDXC,MAAQ,CACJC,QAAQ,EACRC,KAAM,KAGVC,YAAc,SAAAC,GACVA,EAAMC,QAAUC,SAASC,eAAe,QAAQC,aAAe,EACzDC,EAAKC,aACLN,EAAMO,QAAUL,SAASC,eAAe,QAAQK,YAAc,EAC9DH,EAAKI,aACLJ,EAAKK,eAGfD,WAAa,WAELP,SAASC,eAAe,aAAaQ,YACjCN,EAAKT,MAAME,KACX,IACJ,GAEAO,EAAKO,SAAS,SAAAC,GAAS,MAAK,CACxBf,KAAMe,EAAUf,KAAO,IACvBD,QAAQ,QAKpBa,UAAY,WACJL,EAAKT,MAAME,KAAO,GAClBO,EAAKO,SAAS,SAAAC,GAAS,MAAK,CACxBf,KAAMe,EAAUf,KAAO,IACvBD,QAAQ,QAKpBS,WAAa,WACTD,EAAKO,SAAS,SAAAC,GAAS,MAAK,CACxBhB,QAASgB,EAAUhB,mFAIvB,OACIvB,EAAAC,EAAAC,cAACiB,EAAD,CACIL,QAAS0B,KAAKf,YACdzC,UAAWwD,KAAKlB,MAAMC,OAAS,SAAW,UAE1CvB,EAAAC,EAAAC,cAACuC,EAAD,CACInC,SAAUkC,KAAKlB,MAAME,KACrBrB,WAAYqC,KAAKlB,MAAMC,OACvBR,QAASyB,KAAKR,qBAnDhBU,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAAStB,SAASC,eAAe,SD4H3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.44dcb018.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst LetterCard = styled.div`\n    width: 100%;\n    height: 100%;\n    overflow-y: ${(props) => (props.overflowY)};\n\n    & * {\n        margin: 0;\n        padding: 16px 12px;\n    }\n`\n\nconst EmailAuthor = styled.h3`\n    text-align: left;\n`\n\nconst EmailAddress = styled.h4`\n    text-align: left;\n`\nconst EmailBody = styled.p`\n`\nconst MailCard = props => {\n    const { author, address, body } = props.data\n    return (\n        <LetterCard overflowY={props.scrollable ? 'scroll' : 'hidden'}>\n            <EmailAuthor>From: {author}</EmailAuthor>\n            <EmailAddress>Email: {address} </EmailAddress>\n            <EmailBody>{body}</EmailBody>\n        </LetterCard>\n    )\n}\n\nexport default MailCard\n","import React, { Fragment } from 'react'\nimport styled from 'styled-components'\nimport MailCard from './MailCard'\nimport Data from '../mockData.json'\n\nconst Container = styled.div`\n    display: grid;\n    grid-auto-flow: column;\n    grid-auto-columns: 100%;\n    grid-template-rows: 460px;\n    transform: translateX(${props => props.position}px);\n    transition: all 0.5s;\n`\n\nconst MobileScreen = props => {\n    const mail = Data.mail.map(letter => (\n        <MailCard\n            data={letter}\n            key={letter.body}\n            onClick={props.scrollable ? props.handler : undefined}\n            scrollable={props.scrollable}\n        />\n    ))\n    return (\n        <Fragment>\n            <h1>Sorta view-indicators</h1>\n            <Container id=\"container\" position={props.position}>\n                {mail}\n            </Container>\n        </Fragment>\n    )\n}\n\nexport default MobileScreen\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport MobileScreen from './components/MobileScreen.js'\n\nconst AppDiv = styled.div`\n    overflow-x: hidden;\n    text-align: center;\n    border: 1px solid #858585;\n    width: 320px;\n    height: 550px;\n    margin: auto;\n`\n\nclass App extends Component {\n    state = {\n        isOpen: false,\n        posX: 0\n    }\n\n    handleClick = event => {\n        event.clientY > document.getElementById('root').clientHeight / 2\n            ? this.openLetter()\n            : event.clientX > document.getElementById('root').clientWidth / 2\n            ? this.swipeRight()\n            : this.swipeLeft()\n    }\n\n    swipeRight = () => {\n        if (\n            document.getElementById('container').scrollWidth +\n                this.state.posX -\n                320 >\n            0\n        ) {\n            this.setState(prevState => ({\n                posX: prevState.posX - 320,\n                isOpen: false\n            }))\n        }\n    }\n\n    swipeLeft = () => {\n        if (this.state.posX < 0) {\n            this.setState(prevState => ({\n                posX: prevState.posX + 320,\n                isOpen: false\n            }))\n        }\n    }\n\n    openLetter = () => {\n        this.setState(prevState => ({\n            isOpen: !prevState.isOpen\n        }))\n    }\n    render() {\n        return (\n            <AppDiv\n                onClick={this.handleClick}\n                overflowY={this.state.isOpen ? 'scroll' : 'hidden'}\n            >\n                <MobileScreen\n                    position={this.state.posX}\n                    scrollable={this.state.isOpen}\n                    handler={this.openLetter}\n                />\n            </AppDiv>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}